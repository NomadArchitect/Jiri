{
  "comments": [
    {
      "key": {
        "uuid": "1e95ce6d_e6d4d884",
        "filename": "project/project.go",
        "patchSetId": 5
      },
      "lineNbr": 1015,
      "author": {
        "id": 30867
      },
      "writtenOn": "2019-07-14T19:14:52Z",
      "side": 1,
      "message": "This is a nice approach! I think it may not be obvious why this particular approach is taken. Can you expand the comment to mention that this reverse-matching approach is intended to allow hierarchical matching for hostnames?\n\nOften when this is done, it\u0027s also desirable to have some form of explicit wildcarding support for the \"reference\" domain. For example, \"*.google.com\" or \".google.com\" might be inputs that would support matching \"foo.google.com\", whereas \"google.com\" might be stricter in that it would _only_ match \"google.com\". Do you think this sort of thing would be useful for the expected use-case here?",
      "revId": "05fb8dba58cb825f33eb57380f8f7cb055ed2c0d",
      "serverId": "ccdefb6c-23ea-33ff-848c-339fc6ca2269",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9bea1b93_7a887f85",
        "filename": "project/project.go",
        "patchSetId": 5
      },
      "lineNbr": 1015,
      "author": {
        "id": 12756
      },
      "writtenOn": "2019-07-15T21:30:09Z",
      "side": 1,
      "message": "For restricting the hostname for fuchsia code base, I think wildcard support might be unnecessary as we just want to whitelist very few secend level domains like googlesource.com . It would be useful if we want to reuse this function for other purposes. \n\nI have included a wildcard version of this function using greedy approach. In worst case it would require O(n^2) instead of O(n) of current suffix matching. Consider the length of urls in Fuchsia, it\u0027s probably not a big deal. Please let me know what\u0027s your preference. I will delete the other one.",
      "parentUuid": "1e95ce6d_e6d4d884",
      "revId": "05fb8dba58cb825f33eb57380f8f7cb055ed2c0d",
      "serverId": "ccdefb6c-23ea-33ff-848c-339fc6ca2269",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6067827d_95ff22ff",
        "filename": "project/project.go",
        "patchSetId": 5
      },
      "lineNbr": 1015,
      "author": {
        "id": 30867
      },
      "writtenOn": "2019-07-15T21:45:04Z",
      "side": 1,
      "message": "Wildcards shouldn\u0027t require n^2 effort; I don\u0027t think we would need to support e.g. `foo*bar.com`, just e.g. `*bar.com` or `*.bar.com`.\n\nBut I don\u0027t mean to derail this to add unnecessary complication. Mostly I\u0027m concerned about the documentation since it may not be super clear to someone why this isn\u0027t just some strcmp operation. :)",
      "parentUuid": "9bea1b93_7a887f85",
      "revId": "05fb8dba58cb825f33eb57380f8f7cb055ed2c0d",
      "serverId": "ccdefb6c-23ea-33ff-848c-339fc6ca2269",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c9331400_575a452c",
        "filename": "project/project.go",
        "patchSetId": 5
      },
      "lineNbr": 1015,
      "author": {
        "id": 12756
      },
      "writtenOn": "2019-07-15T22:35:01Z",
      "side": 1,
      "message": "Yes, if we allow only 1 star in the beginning of the reference, it would require O(n). My concern was when the future maintainer found out they can put a star in the allowlist, they might not be aware of the star restrictions. That\u0027s why I put a general purpose wildcard matching function here. The worst case complexity is O(m*n) to be precise.\n\nI think if we can document that only a single prefix star is allowed, your proposal is actually better. It will allow us to use \"google.com\" to match \"google.com\" only while \"*.google.com\" to match \"fuchsia.google.com\" etc. I have patched the code to use your approach.",
      "parentUuid": "6067827d_95ff22ff",
      "revId": "05fb8dba58cb825f33eb57380f8f7cb055ed2c0d",
      "serverId": "ccdefb6c-23ea-33ff-848c-339fc6ca2269",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "70e2b0c9_90ff497d",
        "filename": "project/project.go",
        "patchSetId": 5
      },
      "lineNbr": 1044,
      "author": {
        "id": 30867
      },
      "writtenOn": "2019-07-14T19:14:52Z",
      "side": 1,
      "message": "I would like to suggest breaking this code out into its own function, partially because this function is already really long, but partially also because the amount of code added here (and the functionality in it) would be good to test in its own unit. The HostnameAllowed test doesn\u0027t really do a good job of testing the aggregate case.",
      "revId": "05fb8dba58cb825f33eb57380f8f7cb055ed2c0d",
      "serverId": "ccdefb6c-23ea-33ff-848c-339fc6ca2269",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f24e3c66_822edb31",
        "filename": "project/project.go",
        "patchSetId": 5
      },
      "lineNbr": 1044,
      "author": {
        "id": 12756
      },
      "writtenOn": "2019-07-15T21:30:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "70e2b0c9_90ff497d",
      "revId": "05fb8dba58cb825f33eb57380f8f7cb055ed2c0d",
      "serverId": "ccdefb6c-23ea-33ff-848c-339fc6ca2269",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f3866ec3_c17068bb",
        "filename": "project/project.go",
        "patchSetId": 5
      },
      "lineNbr": 1054,
      "author": {
        "id": 30867
      },
      "writtenOn": "2019-07-14T19:14:52Z",
      "side": 1,
      "message": "Do we expect these lists to ever get large? It may be worth putting a comment to consider switching to a suffix tree in case this whitelist grows significantly since this is n^2.",
      "revId": "05fb8dba58cb825f33eb57380f8f7cb055ed2c0d",
      "serverId": "ccdefb6c-23ea-33ff-848c-339fc6ca2269",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed21cb08_7a541f40",
        "filename": "project/project.go",
        "patchSetId": 5
      },
      "lineNbr": 1054,
      "author": {
        "id": 12756
      },
      "writtenOn": "2019-07-15T21:30:09Z",
      "side": 1,
      "message": "For now, we only allow googlesource.com and the one in sso. In the future we might need to add fuchsia.dev . So overall we will have a very small set of whitelisted domains. I think suffix tree is kind of overkill here. Besides, if we need wildcard matching, suffix tree will not work.",
      "parentUuid": "f3866ec3_c17068bb",
      "revId": "05fb8dba58cb825f33eb57380f8f7cb055ed2c0d",
      "serverId": "ccdefb6c-23ea-33ff-848c-339fc6ca2269",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "667fb598_5257edd9",
        "filename": "project/project.go",
        "patchSetId": 5
      },
      "lineNbr": 1054,
      "author": {
        "id": 30867
      },
      "writtenOn": "2019-07-15T21:45:04Z",
      "side": 1,
      "message": "Sounds good! Though with the wildcard-style matching I mentioned in my reply to the previous comment, you can special case finding `*` in the tree, so it still works. But as I also said there, based on your reply, it seems like a needless complication. Just wanted to make sure :)",
      "parentUuid": "ed21cb08_7a541f40",
      "revId": "05fb8dba58cb825f33eb57380f8f7cb055ed2c0d",
      "serverId": "ccdefb6c-23ea-33ff-848c-339fc6ca2269",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fedf64d1_73aada83",
        "filename": "project/project.go",
        "patchSetId": 5
      },
      "lineNbr": 1054,
      "author": {
        "id": 12756
      },
      "writtenOn": "2019-07-15T22:35:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "667fb598_5257edd9",
      "revId": "05fb8dba58cb825f33eb57380f8f7cb055ed2c0d",
      "serverId": "ccdefb6c-23ea-33ff-848c-339fc6ca2269",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f8281453_62c20359",
        "filename": "project/project_test.go",
        "patchSetId": 5
      },
      "lineNbr": 2585,
      "author": {
        "id": 30867
      },
      "writtenOn": "2019-07-14T19:14:52Z",
      "side": 1,
      "message": "I\u0027m not sure we really need a test for the test data itself.\n\nIt would be good to add tests with empty strings on either side.",
      "range": {
        "startLine": 2583,
        "startChar": 0,
        "endLine": 2585,
        "endChar": 3
      },
      "revId": "05fb8dba58cb825f33eb57380f8f7cb055ed2c0d",
      "serverId": "ccdefb6c-23ea-33ff-848c-339fc6ca2269",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1cb68def_f539cb26",
        "filename": "project/project_test.go",
        "patchSetId": 5
      },
      "lineNbr": 2585,
      "author": {
        "id": 12756
      },
      "writtenOn": "2019-07-15T22:37:00Z",
      "side": 1,
      "message": "I use comma to separate reference and host as go does not support tuple and I really don\u0027t want to write a new type just for this purpose. So if there is no \u0027,\u0027 in the test data it would go wrong.",
      "parentUuid": "f8281453_62c20359",
      "range": {
        "startLine": 2583,
        "startChar": 0,
        "endLine": 2585,
        "endChar": 3
      },
      "revId": "05fb8dba58cb825f33eb57380f8f7cb055ed2c0d",
      "serverId": "ccdefb6c-23ea-33ff-848c-339fc6ca2269",
      "unresolved": false
    }
  ]
}