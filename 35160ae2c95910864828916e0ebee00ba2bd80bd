{
  "comments": [
    {
      "key": {
        "uuid": "2887f81d_e9750fd2",
        "filename": "project/operations.go",
        "patchSetId": 1
      },
      "lineNbr": 93,
      "author": {
        "id": 5195
      },
      "writtenOn": "2018-10-06T00:54:28Z",
      "side": 1,
      "message": "we should error out is user provides both, because it might cause undefined behavior, i am not sure",
      "range": {
        "startLine": 92,
        "startChar": 32,
        "endLine": 93,
        "endChar": 45
      },
      "revId": "35160ae2c95910864828916e0ebee00ba2bd80bd",
      "serverId": "ccdefb6c-23ea-33ff-848c-339fc6ca2269",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "83b6d1b4_1f6d7721",
        "filename": "project/project.go",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 31066
      },
      "writtenOn": "2018-10-08T03:51:50Z",
      "side": 1,
      "message": "Please reconsider this approach.  I suggest implementing \u0027git init \u0026\u0026 git remote add \u003cremote\u003e \u0026\u0026 git fetch --depth \u003cdepth\u003e origin \u003ccommit\u003e\u0027 into a cache that includes the revision + depth into its name.  Otherwise we are forever tied to the ShallowSince date for each repo and would be subject to unbound cache growth on the bots.",
      "range": {
        "startLine": 64,
        "startChar": 4,
        "endLine": 64,
        "endChar": 16
      },
      "revId": "35160ae2c95910864828916e0ebee00ba2bd80bd",
      "serverId": "ccdefb6c-23ea-33ff-848c-339fc6ca2269",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b3a1a33d_80b83886",
        "filename": "project/project.go",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 19891
      },
      "writtenOn": "2018-10-08T15:57:00Z",
      "side": 1,
      "message": "1. Thank you for taking a look, though the feedback would have been more useful if you\u0027d given it earlier.\n2. Can you please explain in detail the difference and the advantage between what you suggest and what\u0027s currently happening?\n3. I think unbounded cache growth is pretty much what we get for all repos except those where we set \"historydepth\" today, so are you suggesting we move towards setting historydepth for all jiri projects?",
      "parentUuid": "83b6d1b4_1f6d7721",
      "range": {
        "startLine": 64,
        "startChar": 4,
        "endLine": 64,
        "endChar": 16
      },
      "revId": "35160ae2c95910864828916e0ebee00ba2bd80bd",
      "serverId": "ccdefb6c-23ea-33ff-848c-339fc6ca2269",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5084fc80_3e675075",
        "filename": "project/project.go",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 19891
      },
      "writtenOn": "2018-10-09T17:13:46Z",
      "side": 1,
      "message": "We discussed this briefly in person but I still would appreciate it if you\u0027d elaborate in writing.\nIn particular, currently the repos where we use historydepth are not pinned to a revision.\ne.g. https://fuchsia.googlesource.com/topaz/+/master/manifest/third_party#19\n\nSo would we have to pin all repos first for your suggestion to work?\nAnd what happens if we encounter an un-pinned repo?",
      "parentUuid": "b3a1a33d_80b83886",
      "range": {
        "startLine": 64,
        "startChar": 4,
        "endLine": 64,
        "endChar": 16
      },
      "revId": "35160ae2c95910864828916e0ebee00ba2bd80bd",
      "serverId": "ccdefb6c-23ea-33ff-848c-339fc6ca2269",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "83c7dd00_ff23ec03",
        "filename": "project/project.go",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 31066
      },
      "writtenOn": "2018-10-09T20:20:49Z",
      "side": 1,
      "message": "No we would not need to pin all repos.\n\nWe would have a branch in the cache logic, where:\n\nif p.revision \u0026\u0026 p.historyDepth {\n  cachePath \u003d mkdir(cacheDir + \u0027/\u0027 + uniqueCacheName(p.remote, p.revision, p.historyDepth))\n  git -C cachePath init\n  git -C cachePath remote add p.remote\n  git -C cachePath fetch --depth p.historyDepth origin p.revision\n}\n\nThis will create a shallow cache specifically at that commit,  if we ever change the revision of the project it would just create a new cache and they would coexist.  Unpinned projects would continue to work normally and could revert to a history depth of 1.",
      "parentUuid": "5084fc80_3e675075",
      "range": {
        "startLine": 64,
        "startChar": 4,
        "endLine": 64,
        "endChar": 16
      },
      "revId": "35160ae2c95910864828916e0ebee00ba2bd80bd",
      "serverId": "ccdefb6c-23ea-33ff-848c-339fc6ca2269",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d81d2f46_edbe2919",
        "filename": "project/project.go",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 19891
      },
      "writtenOn": "2018-10-09T20:46:35Z",
      "side": 1,
      "message": "If we have shallow clones of unpinned projects, then won\u0027t the cache lookup fail just like it does today? \nThat is if your cache keys are (remote, depth, revision) and revision is unspecified, then the logic will think it\u0027s a cache hit but the cache won\u0027t actually have the commit and we\u0027ll fail just like we do today.",
      "parentUuid": "83c7dd00_ff23ec03",
      "range": {
        "startLine": 64,
        "startChar": 4,
        "endLine": 64,
        "endChar": 16
      },
      "revId": "35160ae2c95910864828916e0ebee00ba2bd80bd",
      "serverId": "ccdefb6c-23ea-33ff-848c-339fc6ca2269",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25b26a2f_9bdc1abb",
        "filename": "project/project.go",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 31066
      },
      "writtenOn": "2018-10-10T20:34:50Z",
      "side": 1,
      "message": "Unpinned projects are not a problem under normal circumstances, the cache always contains history up to the specified depth, and the project builds using HEAD of that cache effectively.  The problem lies when consuming a snapshot on a builder because the snapshot translates the unpinned project to a pinned one, and once that pinned commit falls out of the specified history depth of the cache then it fails.",
      "parentUuid": "d81d2f46_edbe2919",
      "range": {
        "startLine": 64,
        "startChar": 4,
        "endLine": 64,
        "endChar": 16
      },
      "revId": "35160ae2c95910864828916e0ebee00ba2bd80bd",
      "serverId": "ccdefb6c-23ea-33ff-848c-339fc6ca2269",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a32fc8f3_aba5b2ea",
        "filename": "project/project.go",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 5195
      },
      "writtenOn": "2018-10-10T21:32:26Z",
      "side": 1,
      "message": "that is why we are changing --dept to --since, we anyways can\u0027t download full history for pinned repos as that timeout",
      "parentUuid": "25b26a2f_9bdc1abb",
      "range": {
        "startLine": 64,
        "startChar": 4,
        "endLine": 64,
        "endChar": 16
      },
      "revId": "35160ae2c95910864828916e0ebee00ba2bd80bd",
      "serverId": "ccdefb6c-23ea-33ff-848c-339fc6ca2269",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cda5d8ac_c1e38de4",
        "filename": "project/project.go",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 19891
      },
      "writtenOn": "2018-10-10T22:23:59Z",
      "side": 1,
      "message": "Nathan, it seems like you just restated the issue but didn\u0027t explain how your per-revision cache solution would avoid it or fix it.\nSorry if I\u0027m just being thick, but could you please elaborate how would we fix this snapshot vs unpinned-with-history-depth mismatch as part of your suggested scheme?",
      "parentUuid": "a32fc8f3_aba5b2ea",
      "range": {
        "startLine": 64,
        "startChar": 4,
        "endLine": 64,
        "endChar": 16
      },
      "revId": "35160ae2c95910864828916e0ebee00ba2bd80bd",
      "serverId": "ccdefb6c-23ea-33ff-848c-339fc6ca2269",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a350de5_d5750201",
        "filename": "project/project.go",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 31066
      },
      "writtenOn": "2018-10-11T16:31:38Z",
      "side": 1,
      "message": "You would end up with your current cache from HEAD with depth N, and for each pinned revision on the same project, you would create a separate cache from REVISION with depth N, that way you are no longer relying on REVISION being within HEAD~N..HEAD.\n\nSo currently for webkit we have:\nfuchsia.googlesource.com-third_party-webkit (Contains last N commit on Master)\n\nI\u0027m proposing that if we have a project that is unpinned then we have the following:\nfuchsia.googlesource.com-third_party-webkit-revision1-N (Contains N commits from revision1)\nfuchsia.googlesource.com-third_party-webkit-revision2-N (Contains N commits from revision2)\nfuchsia.googlesource.com-third_party-webkit-revision3-N (Contains N commits from revision3)\nfuchsia.googlesource.com-third_party-webkit (Contains last N commit on Master)\n\nThis way when the builder encounters a snapshot of a pinned repo, it doesn\u0027t try to pull from the shallow cache at HEAD, it creates its own unique cache at the commit it needs.",
      "parentUuid": "cda5d8ac_c1e38de4",
      "range": {
        "startLine": 64,
        "startChar": 4,
        "endLine": 64,
        "endChar": 16
      },
      "revId": "35160ae2c95910864828916e0ebee00ba2bd80bd",
      "serverId": "ccdefb6c-23ea-33ff-848c-339fc6ca2269",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "292d0aaf_a88d8da2",
        "filename": "project/project.go",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 19891
      },
      "writtenOn": "2018-10-11T18:09:20Z",
      "side": 1,
      "message": "Ack, thanks for explaining.\nI can try to implement that.\nI\u0027ll put this CL on hold in the mean time.\nPetr and Ankur, if you have any objections to this scheme, please state them now rather than once I mail out another CL that implements it.",
      "parentUuid": "9a350de5_d5750201",
      "range": {
        "startLine": 64,
        "startChar": 4,
        "endLine": 64,
        "endChar": 16
      },
      "revId": "35160ae2c95910864828916e0ebee00ba2bd80bd",
      "serverId": "ccdefb6c-23ea-33ff-848c-339fc6ca2269",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7cb3baae_0e396611",
        "filename": "project/project.go",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 5195
      },
      "writtenOn": "2018-10-11T18:17:23Z",
      "side": 1,
      "message": "I have no objection, but git allows you to pull N commits since a commit?",
      "parentUuid": "292d0aaf_a88d8da2",
      "range": {
        "startLine": 64,
        "startChar": 4,
        "endLine": 64,
        "endChar": 16
      },
      "revId": "35160ae2c95910864828916e0ebee00ba2bd80bd",
      "serverId": "ccdefb6c-23ea-33ff-848c-339fc6ca2269",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "38f068af_53471945",
        "filename": "project/project.go",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 19891
      },
      "writtenOn": "2018-10-11T18:25:05Z",
      "side": 1,
      "message": "I just tried running the commands Nathan suggested and it seems to work:\n\n/tmp\n➜  mkdir cachePath\n/tmp\n➜  git -C cachePath init\nInitialized empty Git repository in /tmp/cachePath/.git/\n/tmp\n➜  git -C cachePath remote add origin https://fuchsia.googlesource.com/infra/config\n/tmp\n➜  git -C cachePath fetch --depth 2 origin 1a39c5e73d5105570b5812cfd1781fd39765aa2a\nremote: Counting objects: 93, done\nremote: Finding sources: 100% (93/93)\nremote: Total 93 (delta 12), reused 71 (delta 12)\nUnpacking objects: 100% (93/93), done.\nFrom https://fuchsia.googlesource.com/infra/config\n * branch            1a39c5e73d5105570b5812cfd1781fd39765aa2a -\u003e FETCH_HEAD\n/tmp\n➜  cd cachePath/\n/tmp/cachePath  master ✔\n➜  git checkout FETCH_HEAD\nNote: checking out \u0027FETCH_HEAD\u0027.\n\nHEAD is now at 1a39c5e [buildbucket] Add flattened configs as generated files.\n/tmp/cachePath  (1a39c5e...) ✔                                                                                                              \n➜ git log --pretty\u003doneline | wc -l\n2",
      "parentUuid": "7cb3baae_0e396611",
      "range": {
        "startLine": 64,
        "startChar": 4,
        "endLine": 64,
        "endChar": 16
      },
      "revId": "35160ae2c95910864828916e0ebee00ba2bd80bd",
      "serverId": "ccdefb6c-23ea-33ff-848c-339fc6ca2269",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bb9aac37_6e7baf6b",
        "filename": "project/project.go",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 5195
      },
      "writtenOn": "2018-10-11T18:35:06Z",
      "side": 1,
      "message": "Oh wow!!! didn\u0027t know that, just one thing, we should use --depth 1 with pinned revs so that we don\u0027t download big commit inadvertently.",
      "parentUuid": "38f068af_53471945",
      "range": {
        "startLine": 64,
        "startChar": 4,
        "endLine": 64,
        "endChar": 16
      },
      "revId": "35160ae2c95910864828916e0ebee00ba2bd80bd",
      "serverId": "ccdefb6c-23ea-33ff-848c-339fc6ca2269",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "961bd79c_abebb793",
        "filename": "project/project.go",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 19891
      },
      "writtenOn": "2018-10-11T18:41:01Z",
      "side": 1,
      "message": "Are you saying default to historydepth\u003d1 whenever a project is pinned?",
      "parentUuid": "bb9aac37_6e7baf6b",
      "range": {
        "startLine": 64,
        "startChar": 4,
        "endLine": 64,
        "endChar": 16
      },
      "revId": "35160ae2c95910864828916e0ebee00ba2bd80bd",
      "serverId": "ccdefb6c-23ea-33ff-848c-339fc6ca2269",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5e5abc52_b0602bba",
        "filename": "project/project.go",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 5195
      },
      "writtenOn": "2018-10-11T18:56:51Z",
      "side": 1,
      "message": "yeah, because we anyways don\u0027t need more commits, but only if project has depth field",
      "parentUuid": "961bd79c_abebb793",
      "range": {
        "startLine": 64,
        "startChar": 4,
        "endLine": 64,
        "endChar": 16
      },
      "revId": "35160ae2c95910864828916e0ebee00ba2bd80bd",
      "serverId": "ccdefb6c-23ea-33ff-848c-339fc6ca2269",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d009d09f_0fe52882",
        "filename": "project/project.go",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 5195
      },
      "writtenOn": "2018-10-06T00:54:28Z",
      "side": 1,
      "message": "not sure if golang supports date, if not we should validate it",
      "range": {
        "startLine": 67,
        "startChar": 14,
        "endLine": 67,
        "endChar": 20
      },
      "revId": "35160ae2c95910864828916e0ebee00ba2bd80bd",
      "serverId": "ccdefb6c-23ea-33ff-848c-339fc6ca2269",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3b876793_8bdd3666",
        "filename": "project/project.go",
        "patchSetId": 1
      },
      "lineNbr": 1248,
      "author": {
        "id": 5195
      },
      "writtenOn": "2018-10-06T00:54:28Z",
      "side": 1,
      "message": "this was a hack for shallow clones, not sure how this will change with shallow-since.\n\nthe problem was that if i did normal fetch it was failing on mirror clone. So to test this jiri update with cache and then jiri update again and see that cache creation doesn\u0027t take eternity to complete",
      "range": {
        "startLine": 1234,
        "startChar": 0,
        "endLine": 1248,
        "endChar": 3
      },
      "revId": "35160ae2c95910864828916e0ebee00ba2bd80bd",
      "serverId": "ccdefb6c-23ea-33ff-848c-339fc6ca2269",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7d69dea6_a60bb614",
        "filename": "project/project_test.go",
        "patchSetId": 1
      },
      "lineNbr": 260,
      "author": {
        "id": 5195
      },
      "writtenOn": "2018-10-06T00:54:28Z",
      "side": 1,
      "message": "try getting date and time and use those to test it out?",
      "range": {
        "startLine": 260,
        "startChar": 33,
        "endLine": 260,
        "endChar": 45
      },
      "revId": "35160ae2c95910864828916e0ebee00ba2bd80bd",
      "serverId": "ccdefb6c-23ea-33ff-848c-339fc6ca2269",
      "unresolved": true
    }
  ]
}