{
  "comments": [
    {
      "key": {
        "uuid": "97e802d4_da27205d",
        "filename": "cipd/cipd.go",
        "patchSetId": 2
      },
      "lineNbr": 251,
      "author": {
        "id": 30867
      },
      "writtenOn": "2018-12-10T22:59:18Z",
      "side": 1,
      "message": "Two minor points:\n\n1) When you\u0027re passing channels around, you can also encode the direction of the channel in the type. This is useful when you only expect to read or write from the channel. In this case, we\u0027re only writing to the channel, so you can use the type \"chan\u003c- bool\". This has the nice property of not accepting just any channel: the channel _must_ be writable.\n\n2) Unless there are good reasons not to, it\u0027s idiomatic to just call a channel \"c\". One example reason not to includes using channel pairs, where each channel has some specific function (as in the case of https://gobyexample.com/channel-directions).\n\nHowever, see below for comments on a better approach than using channels here.",
      "range": {
        "startLine": 251,
        "startChar": 58,
        "endLine": 251,
        "endChar": 73
      },
      "revId": "f8d9d12558ac820f9e5f2fc01186dd97292a50ae",
      "serverId": "ccdefb6c-23ea-33ff-848c-339fc6ca2269",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a624cbbd_f7f181e1",
        "filename": "cipd/cipd.go",
        "patchSetId": 2
      },
      "lineNbr": 305,
      "author": {
        "id": 30867
      },
      "writtenOn": "2018-12-10T22:59:18Z",
      "side": 1,
      "message": "This comment is a little confusing to me without some additional context. Is there a package called \"package\" that contains a type \"Package\" that would be otherwise useful?\n\nI call out these import cycle comments because usually if there\u0027s some confusion about cycles, it means that code is not well organized, and that\u0027s a signal that we should improve that situation (though perhaps not in this CL).",
      "range": {
        "startLine": 305,
        "startChar": 1,
        "endLine": 305,
        "endChar": 58
      },
      "revId": "f8d9d12558ac820f9e5f2fc01186dd97292a50ae",
      "serverId": "ccdefb6c-23ea-33ff-848c-339fc6ca2269",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0bf7f99e_af6c5bd0",
        "filename": "cipd/cipd.go",
        "patchSetId": 2
      },
      "lineNbr": 318,
      "author": {
        "id": 30867
      },
      "writtenOn": "2018-12-10T22:59:18Z",
      "side": 1,
      "message": "The chanMap here seems to be used to ensure we don\u0027t return before we\u0027ve checked the ACLs for all packages. A better way to do this is to use a sync.WaitGroup. So something like the following would be a good pattern for this sort of thing:\n\nvar wg sync.WaitGroup\nfor key :\u003d range pkgs {\n  wg.Add(1)\n  go func(key string) {\n    defer wg.Done()\n    checkPackageACL(jirix, key, versions[key])\n  }(key)\n}\nwg.Wait()\n\nThis is the same LOC for the two loops, but reduces the LOC/complexity in checkPackageACL.",
      "range": {
        "startLine": 310,
        "startChar": 0,
        "endLine": 318,
        "endChar": 2
      },
      "revId": "f8d9d12558ac820f9e5f2fc01186dd97292a50ae",
      "serverId": "ccdefb6c-23ea-33ff-848c-339fc6ca2269",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a404a3fb_e9b64cdf",
        "filename": "cipd/cipd_test.go",
        "patchSetId": 2
      },
      "lineNbr": 193,
      "author": {
        "id": 30867
      },
      "writtenOn": "2018-12-10T22:59:18Z",
      "side": 1,
      "message": "please use Fatalf with a prefix to disambiguate where the error came from.",
      "range": {
        "startLine": 193,
        "startChar": 4,
        "endLine": 193,
        "endChar": 9
      },
      "revId": "f8d9d12558ac820f9e5f2fc01186dd97292a50ae",
      "serverId": "ccdefb6c-23ea-33ff-848c-339fc6ca2269",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c1914f66_5120b8d3",
        "filename": "cipd/cipd_test.go",
        "patchSetId": 2
      },
      "lineNbr": 204,
      "author": {
        "id": 30867
      },
      "writtenOn": "2018-12-10T22:59:18Z",
      "side": 1,
      "message": "please use Fatalf with a prefix to disambiguate where the error came from.",
      "range": {
        "startLine": 204,
        "startChar": 4,
        "endLine": 204,
        "endChar": 9
      },
      "revId": "f8d9d12558ac820f9e5f2fc01186dd97292a50ae",
      "serverId": "ccdefb6c-23ea-33ff-848c-339fc6ca2269",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f60aad8a_4a79c387",
        "filename": "cipd/cipd_test.go",
        "patchSetId": 2
      },
      "lineNbr": 208,
      "author": {
        "id": 30867
      },
      "writtenOn": "2018-12-10T22:59:18Z",
      "side": 1,
      "message": "Let\u0027s make these ErrorF, since one failing doesn\u0027t seem like it implies the other.",
      "range": {
        "startLine": 208,
        "startChar": 4,
        "endLine": 208,
        "endChar": 10
      },
      "revId": "f8d9d12558ac820f9e5f2fc01186dd97292a50ae",
      "serverId": "ccdefb6c-23ea-33ff-848c-339fc6ca2269",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dfd5cae5_fc6e04f9",
        "filename": "cipd/cipd_test.go",
        "patchSetId": 2
      },
      "lineNbr": 231,
      "author": {
        "id": 30867
      },
      "writtenOn": "2018-12-10T22:59:18Z",
      "side": 1,
      "message": "CheckLoggedIn",
      "range": {
        "startLine": 231,
        "startChar": 12,
        "endLine": 231,
        "endChar": 29
      },
      "revId": "f8d9d12558ac820f9e5f2fc01186dd97292a50ae",
      "serverId": "ccdefb6c-23ea-33ff-848c-339fc6ca2269",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "de164735_0d44a8e4",
        "filename": "project/manifest.go",
        "patchSetId": 2
      },
      "lineNbr": 552,
      "author": {
        "id": 30867
      },
      "writtenOn": "2018-12-10T22:59:18Z",
      "side": 1,
      "message": "I think we can chuck this comment; the Warningf string basically says exactly this.",
      "range": {
        "startLine": 551,
        "startChar": 0,
        "endLine": 552,
        "endChar": 51
      },
      "revId": "f8d9d12558ac820f9e5f2fc01186dd97292a50ae",
      "serverId": "ccdefb6c-23ea-33ff-848c-339fc6ca2269",
      "unresolved": true
    }
  ]
}